1. OOP Fundamentals
"""In this chapter, you'll learn what object-oriented programming (OOP) is, how it differs from procedural-programming, 
and how it can be applied. You'll then define your own classes, and learn how to create methods, attributes, and constructors."""

1.1. What is OOP?
1.2. OOP termininology
1.3. Exploring object interface
1.4. Class anatomy: attributes and methods
1.5. Understanding class definitions
1.6. Create your first class
1.7. Using attributes in class definition
1.8. Class anatomy: the __init__ constructor
1.9. Correct use of __init__
1.10. Add a class constructor
1.11. Write a class from scratch


2. Inheritance and Polymorphism
"""Inheritance and polymorphism are the core concepts of OOP that enable efficient and consistent code reuse. 
Learn how to inherit from a class, customize n redefine methods, n review the differences between class-level data n instance-level data."""

2.1. Instance and class data
2.2. Class-level attributes
2.3. Changing class attributes
2.4. Alternative constructors
2.5. Class inheritance
2.6. Understanding inheritance
2.7. Create a subclass
2.8. Customizing functionality via inheritance
2.9. Method inheritance
2.10. Inheritance of class attributes
2.11. Customizing a DataFrame



3. Integrating with Standard Python
"""In this chapter, you'll learn how to make sure that objects that store the same data are considered equal, 
how to define and customize string representations of objects, and even how to create new error types. 
Through interactive exercises, youâ€™ll learn how to further customize your classes to make them work more like standard Python data types."""

3.1. Operator overloading: comparison
3.2. Overloading equality
3.3. Checking class equality
3.4. Comparison and inheritance
3.5. Operator overloading: string representation
3.6. String formatting review
3.7. String representation of objects
3.8. Exceptions
3.9. Catching exceptions
3.10. Custom exceptions
3.11. Handling exception hierarchies

4.  Best Practices of Class Design
"""How do you design classes for inheritance? Does Python have private attributes? Is it possible to control attribute access? 
You'll find answers to these questions (and more) as you learn class design best practices."""

4.1. Designing for inheritance and polymorphism
4.2. Polymorphic methods
4.3. Square and rectangle
4.4. Managing data access: private attributes
4.5. Attribute naming conventions
4.6. Using internal attibutes
4.7. Properties
4.8. What do properties do?
4.9. Create and set properties
4.10. Read-only properties
4.11. Congratulations!
