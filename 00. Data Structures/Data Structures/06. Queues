# 01. Queue using Two Stacks
class MyQueue(object):
    def __init__(self):
        self.q1 = []
        self.q2 = []
    
    def peek(self):
        if not self.q2:
            while self.q1:
                self.q2.append(self.q1.pop())
         
        return self.q2[-1]
        
    def pop(self):
        if not self.q2:
            while self.q1:
                self.q2.append(self.q1.pop())
        
        return self.q2.pop()
        
    def put(self, value):
        self.q1.append(value)

queue = MyQueue()
t = int(input())
for line in range(t):
    values = map(int, input().split())
    values = list(values)
    if values[0] == 1:
        queue.put(values[1])        
    elif values[0] == 2:
        queue.pop()
    else:
        print(queue.peek())


# 02. Castle on the Grid
#!/usr/bin/env python3

import sys
from collections import deque

def is_safe(grid, x, y, distances):
    return x >= 0 and x < len(grid) and y >= 0 and y < len(grid) and distances[x][y] == -1 and grid[x][y] != 'X' 

def get_safe_moves(grid, node, distances):
    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
    variants = []
    
    for di in directions:
        nunode = (node[0] + di[0], node[1] + di[1])
        while is_safe(grid, nunode[0], nunode[1], distances):
            variants.append(nunode)
            nunode = (nunode[0] + di[0], nunode[1] + di[1])
            
    return variants
            

def minimumMoves(grid, startX, startY, goalX, goalY):
    next_to_visit = deque()
    node = (startX, startY)
    next_to_visit.appendleft(node)
    distances = [[-1]*len(grid) for _ in range(len(grid))]
    distances[startX][startY] = 0
    
    while next_to_visit:
        node = next_to_visit.pop()
        #print("point = ({}, {})".format(node[0], node[1]))
        #for row in distances:
        #    print(row)
        #print()
        height = distances[node[0]][node[1]]
       
        variants = get_safe_moves(grid, node, distances)
        
        for var in variants:
            if var == (goalX, goalY):
                return height + 1
            distances[var[0]][var[1]] = height + 1
            next_to_visit.appendleft(var)
                
    return -1
    

if __name__ == "__main__":
    n = int(input().strip())
    grid = []
    for _ in range(n):
        layer = list(input().strip())
        grid.append(layer)
    startX, startY, goalX, goalY = [int(i) for i in input().strip().split()]
    result = minimumMoves(grid, startX, startY, goalX, goalY)
    print(result)



# 03. Down to Zero II
#!/bin/python3

import sys

def generate_seive():
    limit = pow(10, 6) + 1
    seive = [-1]* limit
    seive[0], seive[1], seive[2], seive[3] = 0, 1, 2, 3
    
    for iind in range(limit):
        if seive[iind] == -1 or seive[iind] > seive[iind-1] + 1:
            seive[iind] = seive[iind-1] + 1
            
        jind = 1
        while jind <= iind and jind * iind < limit:
            if seive[jind * iind] == -1 or seive[jind * iind] > seive[iind] + 1:
                seive[jind * iind] = seive[iind] + 1
            jind += 1
    
    return seive

if __name__ == "__main__":
    Q = int(input().strip())
    seive = generate_seive()
    for a0 in range(Q):
        N = int(input().strip())
        print(seive[N])



# 04. Truck Tour
#!/usr/bin/env python3

import queue

if __name__ == "__main__":
    n = int(input().strip())
    res = 0
    tank = 0
    q = queue.Queue()

    
    for ind in range(n):
        petr, dist = [int(arg) for arg in input().strip().split()]
        tank += petr
        
        if dist <= tank:
            tank -= dist
        else:
            tank = 0
            res = ind+1
            
        q.put((petr, dist))
            
    print(res)



# 05. Queries with Fixed Length
#!/usr/bin/env python3

if __name__ == "__main__":
    n, q = [int(x) for x in input().strip().split()]
    arr = [int(x) for x in input().strip().split()]
    
    for _ in range(q):
        d = int(input().strip())
        maxes = []
        was_first = False
        
        for i in range(n - d + 1):
            if i == 0 or was_first == True:
                #print(arr[i:i+d])
                maxes.append(max(arr[i:i+d]))
            else:
                #print("max({}, {})".format(maxes[-1], arr[i+d-1]))
                maxes.append(max(maxes[-1], arr[i+d-1]))
                
            if maxes[-1] == arr[i]:
                was_first = True
            else:
                was_first = False
            
        print(min(maxes))
            



