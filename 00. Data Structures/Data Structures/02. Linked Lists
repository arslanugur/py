#!/bin/python3

# 01. Print the Elements of a Linked List
"""
 Print elements of a linked list on console
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 
"""
def print_list(head):
    node = head
    while node != None:
        print(node.data)
        node = node.next


# 02. Insert a Node at the Tail of a Linked List
"""
 Insert Node at the end of a linked list 
 head pointer input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
 return back the head of the linked list in the below method
"""

def Insert(head, data):
    node = head
    if head is None:
        head = Node(data)
        return head
    
    while  node.next != None:
        node = node.next
    
    node.next = Node(data)
    
    return head




# 03. Insert a Node at the Head of a Linked List

"""
 Insert Node at the begining of a linked list
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the head of the linked list in the below method. 
"""

def Insert(head, data):
    if head is None:
        head = Node(data)
        return head
    else:
        buf = head
        
        head = Node(data)
        head.next = buf
        
        return head
    
# 04. Insert a Node at a Specific Position in a Linked List
"""
 Insert Node at a specific position in a linked list
 head input could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the head of the linked list in the below method. 
"""
#This is a "method-only" submission.
#You only need to complete this method.

def list_len(head):
    node = head
    res = 0
    while node != None:
        res += 1
        node = node.next
    return res

def print_list(head):
    node = head
    while node != None:
        print("{}".format(node.data), end='')
        node = node.next
    print()
    
def InsertNth(head, data, position):
    if list_len(head) == 1 and head.data == 2:
        head = Node(data = data)
    elif position == 0:
        head = Node(data = data, next_node = head)
    else:
        node = head
        for _ in range(position - 1):
            node = node.next
        
        node.next = Node(data, next_node = node.next)
        
    return head



# 05. Delete a Node from a Linked List
"""
 Delete Node at a given position in a linked list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the head of the linked list in the below method. 
"""

def Delete(head, position):
    if position == 0:
        head = head.next
    else:
        node = head
        for _ in range(position-1):
            node = node.next
        
        node.next = node.next.next
        
    return head


# 06. Print the Elements of a Linked List in Reverse
"""
 Print elements of a linked list in reverse order as standard output
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
"""

def ReversePrint(head):
    if head is None:
        return
    else:
        out = []
        node = head
        
        while node != None:
            out.append(node.data)
            node = node.next
            
        print("\n".join(map(str, out[::-1])))
  

# 07. Reverse a Linked List
"""
 Reverse a linked list
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the head of the linked list in the below method.
"""

def Reverse(head):
    prev = None
    node = head
    while node is not None:
        buf = node.next
        node.next = prev
        prev = node
        node = buf
        
    head = prev
    return head


# 08. Compare Two Linked Lists
"""
 Merge two linked list
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the head of the linked list in the below method.
"""

def CompareLists(headA, headB):
    if headA is None and headB is None:
        return 0
    else:
        nodeA = headA
        nodeB = headB
        while nodeA and nodeB:
            if nodeA.data != nodeB.data:
                return 0
            nodeA = nodeA.next
            nodeB = nodeB.next
        
        if nodeA is None and nodeB is None:
            return 1
        else:
            return 0



# 09. Merge Two Sorted Linked Lists
"""
 Merge two linked lists
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the head of the linked list in the below method.
"""

def Insert(head, data):
    node = head
    if head is None:
        head = Node(data)
        return head
    
    while node.next is not None:
        node = node.next
    
    node.next = Node(data)
    
    return head

def MergeLists(headA, headB):
    list_out = Node()
    node_a = headA
    node_b = headB
    
    while node_a and node_b:
        if node_a.data < node_b.data:
            list_out = Insert(list_out, node_a.data)
            node_a = node_a.next
        else:
            list_out = Insert(list_out, node_b.data)
            node_b = node_b.next
    
    last_node = list_out
    while last_node.next is not None:
        last_node = last_node.next
    
    if node_a:
        last_node.next = node_a
    elif node_b:
        last_node.next = node_b
        
    return list_out.next



# 10. Get the Value of the Node at a Specific Position from the Tail
#Body
"""
 Get Node data of the Nth Node from the end.
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the node data of the linked list in the below method.
"""

def GetNode(head, position):
    node = head
    list_len = 0
    
    while node != None:
        node = node.next
        list_len += 1
        
    node = head
    for _ in range(list_len - position - 1):
        node = node.next
    
    return node.data
  
  
# 11. Delete Duplicate Value Nodes from a Sorted Linked List
"""
 Delete duplicate nodes
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 return back the head of the linked list in the below method.
"""

def RemoveDuplicates(head):
    node = head
    
    while node.next != None:
        if node.data == node.next.data:
            node.next = node.next.next
            continue
        node = node.next
  
    return head
  
  
  
# 12. Find the Merge Point of Two Joined Linked Lists
"""
 Find the node at which both lists merge and return the data of that node.
 head could be None as well for empty list
 Node is defined as
 
 class Node(object):
 
   def __init__(self, data=None, next_node=None):
       self.data = data
       self.next = next_node
 
"""

def FindMergeNode(headA, headB):
    values_a = []
    values_b = []
    
    node_a = headA
    node_b = headB
    
    while node_a != None:
        values_a.append(node_a.data)
        node_a = node_a.next
  
    while node_b != None:
        values_b.append(node_b.data)
        node_b = node_b.next
    
    res = values_a[-1]
    ind = 1
    while values_a[-ind] == values_b[-ind]:
        ind += 1
    
    res = values_a[-(ind-1)]
    
    return res
    
  
# 13.

