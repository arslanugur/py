#!/bin/python3

# 01. Tree: Preorder Traversal
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""


def preOrder(root):
    print root.data,
    if root.left is not None:
        preOrder(root.left)
    if root.right is not None:
        preOrder(root.right)
        

# 02. Tree: Postorder Traversal
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def postOrder(root):
    if root is not None:
        postOrder(root.left)
        postOrder(root.right)
        print root.data,



# 03. Tree: Inorder Traversal
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)
"""
def inOrder(root):
    if root is not None:
        inOrder(root.left)
        print root.data,
        inOrder(root.right)



# 04. Tree: Height of a Binary Tree
# Enter your code here. Read input from STDIN. Print output to STDOUT
'''
class Node:
      def __init__(self,info): 
          self.info = info  
          self.left = None  
          self.right = None 
           
       // this is a node of the tree , which contains info as data, left , right
'''
def height(root):
    if root is not None:
        return max(1 + height(root.left), 1 + height(root.right))
    else:
        return -1
    

# 05. Tree : Top View
"""
Node is defined as
self.left (the left child of the node)
self.right (the right child of the node)
self.data (the value of the node)"""

def _topLeft(root):
    if root is not None:
        _topLeft(root.left)
        print root.data,

def _topRight(root):
    if root is not None:
        print root.data,
        _topRight(root.right)

def topView(root):
    _topLeft(root.left)
    print root.data,
    _topRight(root.right)
        

# 06. Tree: Level Order Traversal

# 07. Binary Search Tree : Insertion

# 08. Binary Search Tree : Lowest Common Ancestor

# 09. Tree: Huffman Decoding

# 10. Swap Nodes [Algo]

# 11. Is This a Binary Search Tree?
