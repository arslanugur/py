# SECTION 1: map
# The built-in functions map and filter are very useful higher-order functions that operate on lists (or similar objects called iterables).
# The function map takes a function and an iterable as arguments, and returns a new iterable with the function applied to each argument.
# Example:
def add_five(x):
    return x + 5

nums = [11, 22, 33, 44, 55]
result = list(map(add_five, nums))
print(result)           # [16, 27, 38, 49, 60]


# Shorter Way:
def add_five(x): 
  return x + 5 

nums = [11, 22, 33, 44, 55] 
print(list(map(add_five, nums))) # [16, 27, 38, 49, 60]

# We could have achieved the same result more easily by using lambda syntax.
# Example:
nums = [11, 22, 33, 44, 55]

result = list(map(lambda x: x+5, nums))
print(result)           # [16, 27, 38, 49, 60]

# To convert the result into a list, we used list explicitly.

# Example:
nums = [11, 22, 33, 44, 55] 
result = [n + 5 for n in nums] 
print(result)           # [16, 27, 38, 49, 60]

# These all give the same result. I like the last one. 
nums = [11, 22, 33, 44, 55] 
# map with named function 
def add_five(x): 
  return x + 5 
  result = list(map(add_five, nums)) 
  print(result) 
#

# map with lambda 
result = list(map(lambda x: x+5, nums)) 
print(result) # [16, 27, 38, 49, 60]

# list comprehension 
print([x+5 for x in nums]) # [16, 27, 38, 49, 60]

# In general, I don't like using extra words that aren't necessary, like "list", "map", "lambda" and even here, "result" unless they really improve the code.


# 1-line solution of the example: 
print([n+5 for n in [n*11 for n in range (1,6)]])     # [16, 27, 38, 49, 60]


# To convert the result into a list, we used list explicitly.
# Example: A tuple works as well. but, a tuple is imutable. But if you try to change an element (or more) of a tuple, then it'll produce error message. therefore a list is a need
nums = [1,2,3,4,5] 
res = tuple(filter(lambda x:x>3, nums)) 
print(res) # Result: (4, 5) which is a tuple. This works no matter if the source is a tuple or a list list -> list list -> tuple tuple -> tTuple tuple -> list

# Why use filter and lambda when we have list comprehensions? 
nums = [1, 2, 3, 4, 5] 
res = tuple(x for x in nums if x > 3) 
print(res) # 'res' could be a list or a tuple, if immutability is needed.


# Lambda expressions can only take one iterable as an argument, map can take multiple. 
# So the following example is possible with map, but not lambda 
def add_numbers(x,y): 
  return x + y 

nums = [11, 22, 33, 44, 55] 
result = list(map(add_numbers, nums, nums)) 
print(result)         # [22, 44, 66, 88, 110]

# what happens if the list contains nested list? does the elements in the inner lists also get added by 5.
# Just checked with compiler throws error.

# If you wanna know what type Is an object you can always use the type() function. 
# Example: 
nums = [11, 22, 33, 44, 55] 
result = map(lambda x: x+5, nums) 
print(type(result)) # <class 'map'> # useful for comprehension


# You can use map function to convert all elements of a list to another type. 
numbers = [1,2,3,4,5] 
numbers = list(map(str,numbers)) # ['1','2','3','4']

# Example:
import numpy as np 
nums = np.array([11,22,33,44,55]) 
result = nums + 5 
print(result)       # [16 27 38 49 60]


# list(map(lambda x: x+5, nums)) == [*map(lambda x: x+5, nums)]


# Example: to multiply each item in the list by 2 using lambda syntax.
nums = [11, 22, 33]
a = list(map(lambda x: x*2, nums))
print(a)    # [22, 44, 66]

# As a second way for simple tasks: Prefer the Comprehension: 
a = [x*2 for x in nums]

# map TAKES in or DEMANDS 1. an ITERABLE (a CONTAINER OBJECT capable of returning its members one at a time) + 2. 
# a FUNCTION, and RETURNS a (new) ITERABLE 
# Hence, we MUST use list function in order to actually CONVERT the (new) ITERABLE (a CONTAINER OBJECT) → into a LIST type object.

# map, filter and reduce explained with emoji
map([🐮, 🍠, 🐔, 🌾], cook) # [🍔, 🍟, 🍗, 🍞] 
filter([🍔, 🍟, 🍗, 🍞], isVegetarian) # [🍟, 🍞] 
reduce([🍔, 🍟, 🍗, 🍞], eat) # shit

# Lambda can take as an argument a map function: 
(lambda x: x*2)(*map(int, input().split())) * is quite similar to map function, it applies to each value in a list, calling them from a list in the order and applying to lambda

# 'map' can make simple calculating through func + nums
# A lambda function is a small anonymous function.A lambda function can take any number of arguments, but can only have one expression. Ex: x = lambda a : a + 10 print(x(5))



# SECTION 2: filter
# The function filter filters an iterable by removing items that don't match a predicate (a function that returns a Boolean).
# Example:
nums = [11, 22, 33, 44, 55]
res = list(filter(lambda x: x%2==0, nums))
print(res)              # [22, 44]

# Like map, the result has to be explicitly converted to a list if you want to print it.

# The same result with list comprehension:
nums=[11, 22, 33, 44, 55] 
print([x for x in nums if x%2==0])  # [22, 44] 
# new list but not stored in a variable. 
# If you wanted to store it in a variable just cut everything inside the brackets of print, 
# paste on a new line just before the print and add the variableName = on the left 
# you could also write this apps example to not define the res variable by cutting everything to the right of the = on the line defining res, 
# pasting it into the print instead of res and removing rest of the res = line
# Another way:
nums=[11, 22, 33, 44, 55] 
print([x for x in range(11,56,11) if x%2==0])   # [22, 44]

# Example: the following code gives a list of even numbers from 1 to 100 which are divisible by 3 
nums = range(1,101) 
result = list(filter(lambda x: x%3==0 and x%2==0, nums))
print(result)               # [6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96]


# Example:
def add_five(x): 
    return x+5
    
nums = [11,22,33,44,55] 
result = list(map(lambda x: x+5, nums))
res = tuple(filter(lambda x: x%2==0, nums))
oui = tuple(map(lambda x: x%2==0, nums))
print(oui)      # (False, True, False, True, False)
print(res)      # (22, 44)
print(result)   # [16, 27, 38, 49, 60]


# filter and lambda can be replaced with a list comprehension: 
nums = [11, 22, 33, 44, 55]
# filter and lambda 
res = list(filter(lambda x: x % 2 == 0, nums)) # [22, 44]
print(res)
# list comprehension 
print([x for x in nums if x % 2 == 0])         # [22, 44]


# 1. nums = [11,22,33,44,55] 
# 2. res = list(filter(lambda x : x%2 == 0 , nums )) 
# 3. print(res ) # the way how filter works is, if the condition inside it (as in this case x%2 == 0) evaluates to True, 
               # it spits out the value of x else no value comes out of it the condition x%2 == 0 evaluates to True if x is even or to False if x is odd. 
               # as the code stars to run, value of x in first loop becomes 11. 
               # since 11%2 = 1 the truth value of given condition becomes false and filter spits out nothing In 2nd loop x becomes 22 and as 22%2 =0 
               # the truth value becomes True eventually the filter function spits the value of x as 22 and 
               # the function list puts that value in a list same happens with 33,44 and 55
               # the output list becomes [22,44]
#

# Example:
mylist = [1,2,3,4,5] 
print(list(map(lambda x: x if x>1 else 0, mylist)))     # [0, 2, 3, 4, 5] 
print(list(filter(lambda x: x if x>1 else 0, mylist)))  # [2, 3, 4, 5]      # the difference that the filter can't return in list Zero(False) value 


# Another Way:
def filter_modulo(x): 
    return x%2==0 

nums = [11,22,33,44,55] 
res = list(filter(filter_modulo, nums)) 
print(res)


Here's 4 ways to create this [11, 22, 33, 44, 55] with code by using what we've already learned: #1: # Creates a huge list of numbers that ranges from 1-56, # then filters out all the numbers that are not multiples of 11 print(list(filter(lambda i: i % 11 == 0, range(1,56)))) #2: # Creates a huge list of numbers that ranges from 1-56, # uses for loop to check for multiples of 11, # then appends the results to a new list items = list(range(1, 56)) newList = [ ] for i in items: if i % 11 == 0: newList.append(i) print(newList) #3: # Creates a small list of numbers that ranges from 1-6, # then uses the map function to multiply those number by 11 print(list(map(lambda i: i*11, range(1,6)))) #4: # Creates a small list of numbers that ranges from 1-6, # uses a for loop to multiply those indexes by 11, # then appends the results to a new list items2 = list(range(1, 6)) newList2 = [ ] for i in items2: newList2.append(i*11) print(newList2) Output: [11, 22, 33, 44, 55] #(x4)

To filter with strings: list_char = ["David", "John", "Annabelle", "Johnathan","Veronica"] print(list(filter(lambda y: len(y)>=6, list_char)))

Range & filter both require list calls to display all their result in python 3.example list(range(-5,5)) b=list(filter((lambda x:x<0),range(-5,5))) print(b) Program following filter call picks out items in a sequence that are less than zero. Output=[-1,-2,-3,-4,-5]

Same output with variables!!!1 def reu(x): return x%2==0 nums=[11,22,33,44,55,66] result=list(filter(reu,nums)) print(result)

# Example: to extract all items that are less than 5 from the list.
nums = [1, 2, 5, 8, 3, 0, 7]
res = list(filter(lambda x: x < 5, nums))           # you need to filter out anything less than 5 so that numbers greater than 4 are printed when you execute print(res)
print(res)

# Another Way:
nums = [1, 2, 5, 8, 3, 0, 7] 
res = [x for x in nums if x < 5] 
print(res) 


Hey friends here is an best example for filter I can give. assume a list name fib = [0,1,1,2,3,5,8,13,21,34,55] Now I want to remove all the even numbers from this list, using filters and lambda function so my code is: result = filter(lambda x: x % 2 == 0, fib) now when I print the result, the output is: print (result) >> [0, 2, 8, 34] This shows that the result is holding all the values that we wanted to remove. Similarly in the given question we want numbers greater than 4 to be removed. so similarly our result will be holding the values which are less than 5 and not greater than 4 so our code will be res = list(filter (lambda x:x <5,nums)) print (res) Here the Best Analogy that you can have is having your own Subset from a Set.


# Example:
#named function
def polynomial(x):
    return x**2 + 5*x + 4
print(polynomial(-4))                   # 0

#lambda
print((lambda x: x**2 + 5*x + 4) (-4))  # 0





# Map and Filter function explanation:
#map and filter function testing
def mult(num):
  return num * 4
lst = (1,2,3,4,5,6,)
print (lst)
print ()#This is just to make it more understandable

#mapping using a defined function
result = list(map(mult,lst))
print (result)
print ()#This is just to make it more understandable

#using list comrehension to map
z = [i * 4 for i in lst]
print (z)
mapping = [mult(i) for i in lst]
print (mapping)
print ()#This is just to make it more understandable

#using lambda to map
print (list(map(lambda x: x * 4,lst)))
print ()#This is just to make it more understandable

#using lambda to filter
print (list(filter(lambda x:x % 2 == 0,lst)))
print ()#This is just to make it more understandable

#using list comprehension to filter
y = [i for i in lst if i % 2 == 0]
print (y)
print ()#This is just to make it more understandable

#to test for your filter function condition
map_bool = [i % 2 == 0 for i in lst]
print (map_bool)





