# SECTION 1
# Generators are a type of iterable, like lists or tuples.
# Unlike lists, they don't allow indexing with arbitrary indices, but they can still be iterated through with for loops.
# They can be created using functions and the yield statement.
# Example:
def countdown():
    i=5
    while i > 0:
        yield i
        i -= 1

for i in countdown():
    print(i)          # 5,4,3,2,1
#

# The yield statement is used to define a generator, replacing the return of a function to provide a result to its caller without destroying local variables.


# Examples: 
def countdown(i): 
    while i > 0: 
        yield i 
        i -= 1 
        for i in countdown(i): 
            print(list(countdown(9))) # [9, 8, 7, 6, 5, 4, 3, 2, 1]
#

def countdown(i): 
    while i > 0: 
        yield i 
        i -= 1 
        for i in countdown(9): 
            print(list(countdown(9))) # [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] [9, 8, 7, 6, 5, 4, 3, 2, 1] ====================================== def countdown(i): while i > 0: yield i i -= 1 for i in countdown(9): print(list(countdown(i))) output : [9, 8, 7, 6, 5, 4, 3, 2, 1] [8, 7, 6, 5, 4, 3, 2, 1] [7, 6, 5, 4, 3, 2, 1] [6, 5, 4, 3, 2, 1] [5, 4, 3, 2, 1] [4, 3, 2, 1] [3, 2, 1] [2, 1] [1]
#

# less confusing version:
def countdown(i): 
    while i > 0: 
        yield i 
        i -= 1 
        for x in countdown(9): 
            print(list(countdown(x)))
#

# Here is the difference between generators and normal functions or lists (the simple way): 
# Let's say that you're attending a 2 hour long lecture. 
# If you write notes: you can have infinite memory if you transfer everything to paper. 
# So no matter how much was told in the lecture, you can just write it all down then it's all yielded (written down then and there) so low memory usage. Like with generators. 
# But if you had to remember everything from the lecture 
# then you have to consume a lot of memory storage space for a long time and keep it all in your head. Like with functions and lists.





