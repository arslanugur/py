# STRING FUNCTIONS
# Python contains many useful built-in functions and methods to accomplish common tasks.
# join - joins a list of strings with another string as a separator.
# replace - replaces one substring in a string with another.
# startswith and endswith - determine if there is a substring at the start and end of a string, respectively.
# To change the case of a string, you can use lower and upper.
# The method split is the opposite of join turning a string with a certain separator into a list. 
# Some examples:
# join()
print(", ".join(["spam", "eggs", "ham"]))           # "spam, eggs, ham"
print("Hello ME".replace("ME", "world"))            # "Hello world"
# startswith()
print("This is a sentence.".startswith("This"))     # "True"
# endwith()
print("This is a sentence.".endswith("sentence."))  # "True"
# upper()
print("This is a sentence.".upper())                # "THIS IS A SENTENCE."
# lower()
print("AN ALL CAPS SENTENCE".lower())               # "an all caps sentence"
# split()                                           # split() = split(" ")
print("spam, eggs, ham".split(", "))                # "['spam', 'eggs', 'ham']"
print("spam, eggs, ham".split("a"))                 # ['sp', 'm, eggs, h', 'm']
print("this is a sentence.".capitalize())           # "This is a sentence."

# https://www.pythonforbeginners.com/dictionary/python-split

# These functions need dealing with individually. 
# At least do specific quizzes for join & split, two very frequently needed functions. Only quizzing on .upper seems odd.
# Also the all quiz should be easier - by all means do tortuous, tricky tests at the END of a unit, 
# but when you're encountering a new topic for the first time you need a super simple example that helps you understand simply.

# Example:
sent = "Hello have a nice day"
print(sent)               # Hello have a nice day 
sent1 = sent.split(" ") 
print(sent1)              # ['Hello', 'have', 'a', 'nice', 'day'] 
sent1[3] = "super" 
sent2 = " ".join(sent1) 
print(sent2.upper())      # HELLO HAVE A SUPER DAY 
sent3 = sent2.replace("day", "week")
print(sent3.lower())      # hello have a super week


# Example for the replace function: 
for i in range(5): 
  print(("Hello X").replace("X", str(i))) # Hello 0 Hello 1 Hello 2 Hello 3 Hello 4
#

# Example: to turn the string uppercase.
a = "Spam"
b = a.upper()
print(b)


# Example:
a = "Cool" 
b = a.upper()   # COOL
b = a.lower()   # cool
print(b)



# NUMERIC FUNCTIONS
# To find the maximum or minimum of some numbers or a list, you can use max or min.
# To find the distance of a number from zero (its absolute value), use abs.
# To round a number to a certain number of decimal places, use round.
# To find the total of a list, use sum.
# Some examples:
print(min(1, 2, 3, 4, 0, 2, 1))     # 0
print(max([1, 4, 9, 2, 5, 6, 8]))   # 9
print(abs(-99))                     # 99
print(abs(42))                      # 42
print(sum([1, 2, 3, 4, 5]))         # 15


# Example:  https://en.wikipedia.org/wiki/IEEE_754#Rounding_rules
a = 3.652
print(round(a,1) # 3.7 
print(round(a,0) # 4.0 
print(round(a,3) # (or any number higher than 3) will give 3.652

# Examples:
print(round(5.6184,2))      # 5.62 
print(round(4656.46279,-3)) # 5000

# Example: 
i = 98765.4321
print(round(i))       # 98765 (rounds to full number)
print(round(i,1))     # 98765.4 (rounds to 1 decimal)
print(round(i,2))     # 98765.43 (rounds to 2 decimals)
print(round(i,3))     # 98765.432 (rounds to 3 decimals)
print(round(i,4))     # 98765.4321 (rounds to 4 decimals)
print(round(i,-1))    # 98770.0 (rounds to nearest 10) 
print(round(i,-2))    # 98800.0 (rounds to nearest 100)
print(round(i,-3))    # 99000.0 (rounds to nearest 1000)
print(round(i,-4))    # 100000.0 (rounds to nearest 10000)

# Example:
print(round(3.5))         # 3 
print(round(3.5000001))   # 4 
print(round(-3.4))        # -3 
print(round(-3.5))        # -4  since it chooses the smaller number and -4 < -3 


# it happens: (2.5 rounds to 2, 3.5 rounds to 4) because of binary collision with these decimal numbers. 
# Try this trick that you'll find how deep is rabbit hole
print(0.1+0.1+0.1)                      # for 3 times 0.1     # 0.30000000000000004
print(0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1)  # 8 times the same    # 0.7999999999999999
# Decimals are so hard for binary system (computer tells straight conversely)

# Example:
sum = sum([i for i in range (5)]) 
print(sum)  # 10


# sum, min and max can also take dictionaries as inputs, 
# but remember that by default, keys will be attached, not values, which may sound quite counter intuitive! (unless you use the method .values())
print(max({i: i*2 for i in range(5)}))          # 4
print(max({i: i*2 for i in range(5)}.values())) # 8

# Example: py uses the engineering notation of "j" and not "i" 
print(abs(3+4j))  # 5.0


# print(round(1.5))   # 2 
# print(round(2.5))   # 2
# print(round(3.5))   # 4
# print(round(4.5))   # 4
# print(round(5.5))   # 6
# print(round(6.5))   # 6
# print(round(7.5))   # 8
# print(round(8.5))   # 8
# print(round(102.5)) # 102
# print(round(101.5)) #102 ............................................ Similarly Print (round (-1.5))#-2 Print (round (-2.5))#-2 Print (round (-3.5))#-4 Print (round (-4.5))#-4 Print (round (-5.5))#-6 Print (round (-6.5))#-6 As so on......................... Meaning if the number #being round off is odd, it becomes the next counting whole number irrespective of the sign # if no. is even the result is the no



